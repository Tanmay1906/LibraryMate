generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  phone     String
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  libraries Library[]

  @@map("admins")
}

model Library {
  id          String   @id @default(cuid())
  name        String
  description String?
  address     String
  phone       String
  adminId     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  admin    Admin     @relation(fields: [adminId], references: [id])
  students Student[]
  books    Book[]
}

model Student {
  id                 String   @id @default(cuid())
  name               String
  email              String   @unique
  phone              String
  password           String
  registrationNumber String   @unique
  aadharReference    String
  subscriptionPlan   String   @default("monthly")
  paymentStatus      String   @default("pending")
  joinDate           DateTime @default(now())
  dueDate            DateTime
  libraryId          String
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  library       Library         @relation(fields: [libraryId], references: [id])
  payments      Payment[]
  borrowHistory BorrowHistory[]

  @@map("students")
}

model Book {
  id          String   @id @default(cuid())
  title       String
  author      String
  category    String
  description String?
  coverUrl    String?
  fileUrl     String?
  libraryId   String
  isAvailable Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  library       Library         @relation(fields: [libraryId], references: [id])
  borrowHistory BorrowHistory[]

  @@map("books")
}

model Payment {
  id        String   @id @default(cuid())
  amount    Float
  date      DateTime @default(now())
  status    String   @default("pending")
  plan      String
  method    String
  studentId String
  createdAt DateTime @default(now())

  student Student @relation(fields: [studentId], references: [id])

  @@map("payments")
}

model BorrowHistory {
  id         String    @id @default(cuid())
  studentId  String
  bookId     String
  borrowDate DateTime  @default(now())
  dueDate    DateTime
  returnDate DateTime?
  status     String    @default("borrowed")

  student Student @relation(fields: [studentId], references: [id])
  book    Book    @relation(fields: [bookId], references: [id])

  @@map("borrow_history")
}

model OTP {
  id        String   @id @default(cuid())
  phone     String
  code      String
  verified  Boolean  @default(false)
  expiresAt DateTime
  role      String
  createdAt DateTime @default(now())

  @@map("otps")
}
